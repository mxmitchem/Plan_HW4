---
title: "Homework_4"
---

##loading libraries and data 

```{r}
library(tidyverse)
library(lubridate)
library(tidycensus)
library(ggplot2)
library(dplyr)
```

```{r}
data = read.csv(here::here("C:\\Users\\myami\\Documents\\Plan372\\plan372-exercises\\Homework_4\\airport_pairs (1).csv"))
```

```{r}
head(data)
```
#filtering the data by flights going to RDU and getting the sum of passengers 
```{r}
rdu_passengers = data |>
  filter(dest=="RDU")|>
  filter(passengers > 10000)|>
  summarize(rdu_passengers = sum(passengers))|>
  ungroup()
  
print(rdu_passengers)
```

##departing RDU flights 
```{r}
rdu_departing = data |>
  filter(origin=="RDU")|>
  filter(passengers > 10000)|>
  summarize(rdu_departing = sum(passengers))|>
  ungroup()
  
print(rdu_departing)
```



#Each destination departing from RDU and Going to RDU and their passengers 
```{r}
passengers_origin_to_RDU = data |>
  filter(dest == "RDU")|>
  filter(passengers > 10000)|>
  group_by(origin)|>
  summarize(passengers_origin_to_RDU = (sum(passengers)))|>
  ungroup()
  
passengers_from_RDU = data |>
  filter(origin == "RDU")|>
  filter(passengers > 10000)|>
  group_by(dest)|>
  summarize(passengers_from_RDU = (sum(passengers)))|>
  ungroup()
  
print(passengers_origin_to_RDU)
print(passengers_from_RDU)
```

```{r}
library(tidyverse)
library(tidycensus)
library(sf)
library(stringr)
```

```{r}
data = read.csv(here::here("C:\\Users\\myami\\Documents\\Plan372\\plan372-exercises\\Homework_4\\airport_pairs (1).csv"))
```

```{r}
head(data)
```
#loading the census data and creating a CSV file in excel. 

```{r}
census_data = load_variables(2021, "acs5")
```

```{r}
write_csv(census_data, "census_data.csv")
```

#retrieve Popoulation data from Census

```{r}
census = get_acs(
  geography = "cbsa",
  variables = c(
  "total_population" = "B01003_001",
   "age_distribution" = "B01001_002"),
  year = 2022,
  survey = "acs5", 
  output = "wide")

head(census)
```

#mutating the data to match the same types: characters and characters
```{r}
data = data |>
  mutate(origin_cbsa = as.character(origin_cbsa))
```

```{r}
data = data |>
  mutate(dest_cbsa = as.character(dest_cbsa))
```

# joining the data of origin_cbsa to geoid
```{r}
join_1 = data |>
  left_join(census, by = c ("origin_cbsa" = "GEOID"))
print(join_1)
```



#joining dest_cbsa to geoid

```{r}
join_2 = join_1 |>
  left_join(census, by = c("dest_cbsa" = "GEOID"))
print(join_2)
```

# grouping by GEOID to ensure areas with multiple airports are accurate 

```{r}
grouped_origin_passengers = join_2 |>
  filter(str_detect(NAME.x, "Metro Area")) |>
  group_by(origin_cbsa) |>
  summarize(grouped_origin_passengers = sum(passengers))|>
  ungroup()
print(grouped_origin_passengers)

grouped_dest_passengers = join_2 |>
  filter(str_detect(NAME.x, "Metro Area")) |>
  group_by(dest_cbsa) |>
  summarize(grouped_dest_passengers = sum(passengers))|>
  ungroup()
print(grouped_dest_passengers)
```

#just a cheeky double check

```{r}
test = join_2 |>
  filter(origin_cbsa == "31080") |>
  summarize(total_passengers = sum(passengers))|>
  ungroup()
print(test)
```

#grouping and discovering the total population based on location 
```{r}
origin_pop = join_2 |>
  group_by(origin_cbsa)|>
  summarize(origin_pop = sum(total_populationE.x))|>
  ungroup()|>
print(origin_pop)
```

```{r}
dest_pop = join_2 |>
  group_by(dest_cbsa)|>
  summarize(dest_pop = sum(total_populationE.y)) |>
  ungroup()
print(dest_pop)
```

#create data for first scatterplot

```{r}
combined_data = grouped_origin_passengers |>
  left_join(origin_pop, grouped_origin_passengers, by = "origin_cbsa")
print(combined_data)
```

#change numbers to numerical
```{r}
combined_data = combined_data |>
  mutate(
    grouped_origin_passengers = as.numeric(grouped_origin_passengers),
    origin_pop = as.numeric(origin_pop))
```

#create plot
```{r}
plot_origin = combined_data |>
ggplot(aes(x = origin_pop, y = grouped_origin_passengers)) + geom_point() +labs(title = "Scatterplot of grouped origin passengers VS total Population", x = "origin_passengers", y = "total population")
print(plot_origin)
```

#data for second plot 
```{r}
combined_data_dest = grouped_dest_passengers |>
  left_join(dest_pop, by = "dest_cbsa") |>
  mutate(
    grouped_dest_passengers = as.numeric(grouped_dest_passengers), dest_pop = as.numeric(dest_pop))
print(combined_data_dest)
```
```{r}
combined_data_dest = grouped_dest_passengers |>
left_join(dest_pop, by = "dest_cbsa") |>
mutate(
  grouped_dest_passengers = as.numeric(grouped_dest_passengers),
  dest_pop = as.numeric(dest_pop))
print(combined_data_dest)
```

#creating scatterplot
```{r}
plot_2 = combined_data_dest |>
  ggplot(aes(x = dest_pop, y = grouped_dest_passengers)) + geom_point() + labs(title = "Scatterplot of grouped destination passengers VS total population", x = "Total Population" ,y = "Grouped Destination Passengers")
print(plot_2)
```

#grouping by travel distance and getting the number of passengers 
```{r}
distance_pass = join_2 |>
  group_by(distancemiles) |>
  summarize(distance_pass = sum(passengers))|>
  ungroup()
print(distance_pass)
```

#scatterplot
```{r}
plot_distance = distance_pass |>
  ggplot(aes(x = distancemiles, y = distance_pass)) + geom_point() + labs(title = "Scatterplot of Flight Distance and Passengers",x = "Distance of flight",y = "Passengers")
print(plot_distance)
```

#combining data for the regression 
```{r}
join_2 = join_2 |>
  left_join(combined_data_dest, by = "dest_cbsa") |>
  left_join(combined_data, by = "origin_cbsa")

print(join_2)
```
# creating the regression
```{r}
full_regression = lm(passengers ~ origin_pop + dest_pop + distancemiles + age_distributionE.x + age_distributionE.y, data = join_2)
summary(full_regression)
```
#finding data on RDU for question 4 
```{r}
RDU_info = join_2 |>
  filter (origin == "RDU")
print(RDU_info)
```
#finding data on Portland, OR (PDX) 
```{r}
PDX_info = join_2 |>
  filter(origin == "PDX")
print(PDX_info)
```
#finding data on El paso, TX (ELP)
```{r}
ELP_info = join_2 |>
  filter(origin == "ELP")
print(ELP_info)
```
#finding data on TLH 

```{r}
TLH_info = join_2 |>
  filter(origin == "TLH")
print(TLH_info)
```
#finding data on SMF 

```{r}
SMF_info = join_2 |>
  filter(origin == "SMF")
print(SMF_info)
```


